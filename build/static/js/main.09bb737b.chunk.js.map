{"version":3,"sources":["bg.png","cblogo.PNG","home.js","App.js","index.js"],"names":["ColorButton","withStyles","theme","root","color","palette","getContrastText","common","white","backgroundColor","Button","axios","require","default","useStyles","makeStyles","grow","flexGrow","clearButton","width","borderRadius","padding","fontSize","fontWeight","maxWidth","media","height","paper","spacing","margin","gridContainer","justifyContent","mainContainer","backgroundImage","image","backgroundRepeat","backgroundPosition","backgroundSize","marginTop","imageCard","boxShadow","imageCardEmpty","noImage","input","display","uploadIcon","background","tableContainer","table","tableHead","tableRow","tableCell","borderColor","tableCell1","tableBody","text","textAlign","buttonGrid","detail","flexDirection","alignItems","appbar","loader","formControl","minWidth","marginRight","ImageUpload","classes","selectedFile","setSelectedFile","useState","preview","setPreview","data","setData","setImage","isLoading","setIsloading","type","setType","confidence","useEffect","undefined","objectUrl","URL","createObjectURL","async","formData","FormData","append","res","method","url","headers","status","error","console","sendFile","parseFloat","toFixed","_jsxs","React","Fragment","children","_jsx","AppBar","position","className","Toolbar","Typography","title","variant","noWrap","Container","disableGutters","Grid","container","direction","item","xs","style","marginBottom","FormControl","InputLabel","id","Select","labelId","value","onChange","e","target","MenuItem","Card","CardActionArea","CardMedia","component","CardContent","content","DropzoneArea","acceptedFiles","dropzoneText","files","length","TableContainer","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","scope","class","CircularProgress","onClick","clearData","startIcon","Clear","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.09bb737b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.d6836046.png\";","export default __webpack_public_path__ + \"static/media/cblogo.fcecc55f.PNG\";","// import { useState, useEffect } from \"react\";\r\n// import { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\n// import AppBar from \"@material-ui/core/AppBar\";\r\n// import Toolbar from \"@material-ui/core/Toolbar\";\r\n// import Typography from \"@material-ui/core/Typography\";\r\n// import Avatar from \"@material-ui/core/Avatar\";\r\n// import Container from \"@material-ui/core/Container\";\r\n// import React from \"react\";\r\n// import Card from \"@material-ui/core/Card\";\r\n// import CardContent from \"@material-ui/core/CardContent\";\r\n// import { Paper, CardActionArea, CardMedia, Grid, TableContainer, Table, TableBody, TableHead, TableRow, TableCell, Button, CircularProgress } from \"@material-ui/core\";\r\n// import cblogo from \"./cblogo.PNG\";\r\n// import image from \"./bg.png\";\r\n// import { DropzoneArea } from 'material-ui-dropzone';\r\n// import { common } from '@material-ui/core/colors';\r\n// import Clear from '@material-ui/icons/Clear';\r\n\r\n\r\n\r\n\r\n// const ColorButton = withStyles((theme) => ({\r\n//   root: {\r\n//     color: theme.palette.getContrastText(common.white),\r\n//     backgroundColor: common.white,\r\n//     '&:hover': {\r\n//       backgroundColor: '#ffffff7a',\r\n//     },\r\n//   },\r\n// }))(Button);\r\n// const axios = require(\"axios\").default;\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   grow: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   clearButton: {\r\n//     width: \"-webkit-fill-available\",\r\n//     borderRadius: \"15px\",\r\n//     padding: \"15px 22px\",\r\n//     color: \"#000000a6\",\r\n//     fontSize: \"20px\",\r\n//     fontWeight: 900,\r\n//   },\r\n//   root: {\r\n//     maxWidth: 345,\r\n//     flexGrow: 1,\r\n//   },\r\n//   media: {\r\n//     height: 400,\r\n//   },\r\n//   paper: {\r\n//     padding: theme.spacing(2),\r\n//     margin: 'auto',\r\n//     maxWidth: 500,\r\n//   },\r\n//   gridContainer: {\r\n//     justifyContent: \"center\",\r\n//     padding: \"4em 1em 0 1em\",\r\n//   },\r\n//   mainContainer: {\r\n//     backgroundImage: `url(${image})`,\r\n//     backgroundRepeat: 'no-repeat',\r\n//     backgroundPosition: 'center',\r\n//     backgroundSize: 'cover',\r\n//     height: \"93vh\",\r\n//     marginTop: \"8px\",\r\n//   },\r\n//   imageCard: {\r\n//     margin: \"auto\",\r\n//     maxWidth: 400,\r\n//     height: 500,\r\n//     backgroundColor: 'transparent',\r\n//     boxShadow: '0px 9px 70px 0px rgb(0 0 0 / 30%) !important',\r\n//     borderRadius: '15px',\r\n//   },\r\n//   imageCardEmpty: {\r\n//     height: 'auto',\r\n//   },\r\n//   noImage: {\r\n//     margin: \"auto\",\r\n//     width: 400,\r\n//     height: \"400 !important\",\r\n//   },\r\n//   input: {\r\n//     display: 'none',\r\n//   },\r\n//   uploadIcon: {\r\n//     background: 'white',\r\n//   },\r\n//   tableContainer: {\r\n//     backgroundColor: 'transparent !important',\r\n//     boxShadow: 'none !important',\r\n//   },\r\n//   table: {\r\n//     backgroundColor: 'transparent !important',\r\n//   },\r\n//   tableHead: {\r\n//     backgroundColor: 'transparent !important',\r\n//   },\r\n//   tableRow: {\r\n//     backgroundColor: 'transparent !important',\r\n//   },\r\n//   tableCell: {\r\n//     fontSize: '22px',\r\n//     backgroundColor: 'transparent !important',\r\n//     borderColor: 'transparent !important',\r\n//     color: '#000000a6 !important',\r\n//     fontWeight: 'bolder',\r\n//     padding: '1px 24px 1px 16px',\r\n//   },\r\n//   tableCell1: {\r\n//     fontSize: '14px',\r\n//     backgroundColor: 'transparent !important',\r\n//     borderColor: 'transparent !important',\r\n//     color: '#000000a6 !important',\r\n//     fontWeight: 'bolder',\r\n//     padding: '1px 24px 1px 16px',\r\n//   },\r\n//   tableBody: {\r\n//     backgroundColor: 'transparent !important',\r\n//   },\r\n//   text: {\r\n//     color: 'white !important',\r\n//     textAlign: 'center',\r\n//   },\r\n//   buttonGrid: {\r\n//     maxWidth: \"416px\",\r\n//     width: \"100%\",\r\n//   },\r\n//   detail: {\r\n//     backgroundColor: 'white',\r\n//     display: 'flex',\r\n//     justifyContent: 'center',\r\n//     flexDirection: 'column',\r\n//     alignItems: 'center',\r\n//   },\r\n//   appbar: {\r\n//     background: '#be6a77',\r\n//     boxShadow: 'none',\r\n//     color: 'white'\r\n//   },\r\n//   loader: {\r\n//     color: '#be6a77 !important',\r\n//   }\r\n// }));\r\n// export const ImageUpload = () => {\r\n//   const classes = useStyles();\r\n//   const [selectedFile, setSelectedFile] = useState();\r\n//   const [preview, setPreview] = useState();\r\n//   const [data, setData] = useState();\r\n//   const [image, setImage] = useState(false);\r\n//   const [isLoading, setIsloading] = useState(false);\r\n//   let confidence = 0;\r\n\r\n//   const sendFile = async () => {\r\n//     if (image) {\r\n//       let formData = new FormData();\r\n//       formData.append(\"file\", selectedFile);\r\n//       let res = await axios({\r\n//         method: \"post\",\r\n//         url: \"http://localhost:8000/predict\",\r\n//         data: formData,\r\n//       });\r\n//       if (res.status === 200) {\r\n//         setData(res.data);\r\n//       }\r\n//       setIsloading(false);\r\n//     }\r\n//   }\r\n\r\n//   const clearData = () => {\r\n//     setData(null);\r\n//     setImage(false);\r\n//     setSelectedFile(null);\r\n//     setPreview(null);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     if (!selectedFile) {\r\n//       setPreview(undefined);\r\n//       return;\r\n//     }\r\n//     const objectUrl = URL.createObjectURL(selectedFile);\r\n//     setPreview(objectUrl);\r\n//   }, [selectedFile]);\r\n\r\n//   useEffect(() => {\r\n//     if (!preview) {\r\n//       return;\r\n//     }\r\n//     setIsloading(true);\r\n//     sendFile();\r\n//   }, [preview]);\r\n\r\n//   const onSelectFile = (files) => {\r\n//     if (!files || files.length === 0) {\r\n//       setSelectedFile(undefined);\r\n//       setImage(false);\r\n//       setData(undefined);\r\n//       return;\r\n//     }\r\n//     setSelectedFile(files[0]);\r\n//     setData(undefined);\r\n//     setImage(true);\r\n//   };\r\n\r\n//   if (data) {\r\n//     confidence = (parseFloat(data.confidence) * 100).toFixed(2);\r\n//   }\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <AppBar position=\"static\" className={classes.appbar}>\r\n//         <Toolbar>\r\n//           <Typography className={classes.title} variant=\"h6\" noWrap>\r\n//             Krishi \r\n//           </Typography>\r\n//           <div className={classes.grow} />\r\n//           {/* <Avatar src={cblogo}></Avatar> */}\r\n//         </Toolbar>\r\n//       </AppBar>\r\n//       <Container maxWidth={false} className={classes.mainContainer} disableGutters={true}>\r\n//         <Grid\r\n//           className={classes.gridContainer}\r\n//           container\r\n//           direction=\"row\"\r\n//           alignItems=\"center\"\r\n//           spacing={2}\r\n//         >\r\n//           <Grid item xs={12}>\r\n//             <Card className={`${classes.imageCard} ${!image ? classes.imageCardEmpty : ''}`}>\r\n//               {image && <CardActionArea>\r\n//                 <CardMedia\r\n//                   className={classes.media}\r\n//                   image={preview}\r\n//                   component=\"image\"\r\n//                   title=\"Contemplative Reptile\"\r\n//                 />\r\n//               </CardActionArea>\r\n//               }\r\n//               {!image && <CardContent className={classes.content}>\r\n//                 <DropzoneArea\r\n//                   acceptedFiles={['image/*']}\r\n//                   dropzoneText={\"Drag and drop an image of leaf to process\"}\r\n//                   onChange={onSelectFile}\r\n//                 />\r\n//               </CardContent>}\r\n//               {data && <CardContent className={classes.detail}>\r\n//                 <TableContainer component={Paper} className={classes.tableContainer}>\r\n//                   <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\r\n//                     <TableHead className={classes.tableHead}>\r\n//                       <TableRow className={classes.tableRow}>\r\n//                         <TableCell className={classes.tableCell1}>Label:</TableCell>\r\n//                         <TableCell align=\"right\" className={classes.tableCell1}>Confidence:</TableCell>\r\n//                       </TableRow>\r\n//                     </TableHead>\r\n//                     <TableBody className={classes.tableBody}>\r\n//                       <TableRow className={classes.tableRow}>\r\n//                         <TableCell component=\"th\" scope=\"row\" className={classes.tableCell}>\r\n//                           {data.class}\r\n//                         </TableCell>\r\n//                         <TableCell align=\"right\" className={classes.tableCell}>{confidence}%</TableCell>\r\n//                       </TableRow>\r\n//                     </TableBody>\r\n//                   </Table>\r\n//                 </TableContainer>\r\n//               </CardContent>}\r\n//               {isLoading && <CardContent className={classes.detail}>\r\n//                 <CircularProgress color=\"secondary\" className={classes.loader} />\r\n//                 <Typography className={classes.title} variant=\"h6\" noWrap>\r\n//                   Processing\r\n//                 </Typography>\r\n//               </CardContent>}\r\n//             </Card>\r\n//           </Grid>\r\n//           {data &&\r\n//             <Grid item className={classes.buttonGrid} >\r\n\r\n//               <ColorButton variant=\"contained\" className={classes.clearButton} color=\"primary\" component=\"span\" size=\"large\" onClick={clearData} startIcon={<Clear fontSize=\"large\" />}>\r\n//                 Clear\r\n//               </ColorButton>\r\n//             </Grid>}\r\n//         </Grid >\r\n//       </Container >\r\n//     </React.Fragment >\r\n//   );\r\n// };\r\nimport { useState, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Paper, CardActionArea, CardMedia, Grid, TableContainer, Table, TableBody, TableHead, TableRow, TableCell, Button, CircularProgress, Select, MenuItem, InputLabel, FormControl } from \"@material-ui/core\";\r\nimport cblogo from \"./cblogo.PNG\";\r\nimport image from \"./bg.png\";\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\nimport { common } from '@material-ui/core/colors';\r\nimport Clear from '@material-ui/icons/Clear';\r\n\r\nconst ColorButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(common.white),\r\n    backgroundColor: common.white,\r\n    '&:hover': {\r\n      backgroundColor: '#ffffff7a',\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nconst axios = require(\"axios\").default;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  clearButton: {\r\n    width: \"-webkit-fill-available\",\r\n    borderRadius: \"15px\",\r\n    padding: \"15px 22px\",\r\n    color: \"#000000a6\",\r\n    fontSize: \"20px\",\r\n    fontWeight: 900,\r\n  },\r\n  root: {\r\n    maxWidth: 345,\r\n    flexGrow: 1,\r\n  },\r\n  media: {\r\n    height: 400,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    maxWidth: 500,\r\n  },\r\n  gridContainer: {\r\n    justifyContent: \"center\",\r\n    padding: \"4em 1em 0 1em\",\r\n  },\r\n  mainContainer: {\r\n    backgroundImage: `url(${image})`,\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    height: \"93vh\",\r\n    marginTop: \"8px\",\r\n  },\r\n  imageCard: {\r\n    margin: \"auto\",\r\n    maxWidth: 400,\r\n    height: 500,\r\n    backgroundColor: 'transparent',\r\n    boxShadow: '0px 9px 70px 0px rgb(0 0 0 / 30%) !important',\r\n    borderRadius: '15px',\r\n  },\r\n  imageCardEmpty: {\r\n    height: 'auto',\r\n  },\r\n  noImage: {\r\n    margin: \"auto\",\r\n    width: 400,\r\n    height: \"400 !important\",\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  uploadIcon: {\r\n    background: 'white',\r\n  },\r\n  tableContainer: {\r\n    backgroundColor: 'transparent !important',\r\n    boxShadow: 'none !important',\r\n  },\r\n  table: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableHead: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableRow: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableCell: {\r\n    fontSize: '22px',\r\n    backgroundColor: 'transparent !important',\r\n    borderColor: 'transparent !important',\r\n    color: '#000000a6 !important',\r\n    fontWeight: 'bolder',\r\n    padding: '1px 24px 1px 16px',\r\n  },\r\n  tableCell1: {\r\n    fontSize: '14px',\r\n    backgroundColor: 'transparent !important',\r\n    borderColor: 'transparent !important',\r\n    color: '#000000a6 !important',\r\n    fontWeight: 'bolder',\r\n    padding: '1px 24px 1px 16px',\r\n  },\r\n  tableBody: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  text: {\r\n    color: 'white !important',\r\n    textAlign: 'center',\r\n  },\r\n  buttonGrid: {\r\n    maxWidth: \"416px\",\r\n    width: \"100%\",\r\n  },\r\n  detail: {\r\n    backgroundColor: 'white',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  appbar: {\r\n    background: '#be6a77',\r\n    boxShadow: 'none',\r\n    color: 'white'\r\n  },\r\n  loader: {\r\n    color: '#be6a77 !important',\r\n  },\r\n  formControl: {\r\n    minWidth: 120,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport const ImageUpload = () => {\r\n  const classes = useStyles();\r\n  const [selectedFile, setSelectedFile] = useState();\r\n  const [preview, setPreview] = useState();\r\n  const [data, setData] = useState();\r\n  const [image, setImage] = useState(false);\r\n  const [isLoading, setIsloading] = useState(false);\r\n  const [type, setType] = useState('potato');\r\n  let confidence = 0;\r\n\r\n  const sendFile = async () => {\r\n    if (image) {\r\n      let formData = new FormData();\r\n      formData.append(\"file\", selectedFile);\r\n      try {\r\n        let res = await axios({\r\n          method: \"post\",\r\n          url: `http://localhost:8000/predict?type=${type}`,\r\n          data: formData,\r\n          headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        });\r\n        if (res.status === 200) {\r\n          setData(res.data);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error sending file:\", error);\r\n        // You might want to set an error state here to display to the user\r\n      }\r\n      setIsloading(false);\r\n    }\r\n  }\r\n\r\n  const clearData = () => {\r\n    setData(null);\r\n    setImage(false);\r\n    setSelectedFile(null);\r\n    setPreview(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!selectedFile) {\r\n      setPreview(undefined);\r\n      return;\r\n    }\r\n    const objectUrl = URL.createObjectURL(selectedFile);\r\n    setPreview(objectUrl);\r\n  }, [selectedFile]);\r\n\r\n  useEffect(() => {\r\n    if (!preview) {\r\n      return;\r\n    }\r\n    setIsloading(true);\r\n    sendFile();\r\n  }, [preview]);\r\n\r\n  const onSelectFile = (files) => {\r\n    if (!files || files.length === 0) {\r\n      setSelectedFile(undefined);\r\n      setImage(false);\r\n      setData(undefined);\r\n      return;\r\n    }\r\n    setSelectedFile(files[0]);\r\n    setData(undefined);\r\n    setImage(true);\r\n  };\r\n\r\n  if (data) {\r\n    confidence = (parseFloat(data.confidence) * 100).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" className={classes.appbar}>\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Krishi Samadhan\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          {/* <Avatar src={cblogo}></Avatar> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth={false} className={classes.mainContainer} disableGutters={true}>\r\n        <Grid\r\n          className={classes.gridContainer}\r\n          container\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          <Grid item xs={12} style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', marginBottom: '20px' }}>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel id=\"type-select-label\">Type</InputLabel>\r\n              <Select\r\n                labelId=\"type-select-label\"\r\n                id=\"type-select\"\r\n                value={type}\r\n                onChange={(e) => setType(e.target.value)}\r\n              >\r\n                <MenuItem value=\"potato\">Potato</MenuItem>\r\n                \r\n                <MenuItem value=\"tomato\">Tomato</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Card className={`${classes.imageCard} ${!image ? classes.imageCardEmpty : ''}`}>\r\n              {image && <CardActionArea>\r\n                <CardMedia\r\n                  className={classes.media}\r\n                  image={preview}\r\n                  component=\"image\"\r\n                  title=\"Uploaded Image\"\r\n                />\r\n              </CardActionArea>\r\n              }\r\n              {!image && <CardContent className={classes.content}>\r\n                <DropzoneArea\r\n                  acceptedFiles={['image/*']}\r\n                  dropzoneText={`Drag and drop an image of ${type} to process`}\r\n                  onChange={onSelectFile}\r\n                />\r\n              </CardContent>}\r\n              {data && <CardContent className={classes.detail}>\r\n                <TableContainer component={Paper} className={classes.tableContainer}>\r\n                  <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\r\n                    <TableHead className={classes.tableHead}>\r\n                      <TableRow className={classes.tableRow}>\r\n                        <TableCell className={classes.tableCell1}>Label:</TableCell>\r\n                        <TableCell align=\"right\" className={classes.tableCell1}>Confidence:</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody className={classes.tableBody}>\r\n                      <TableRow className={classes.tableRow}>\r\n                        <TableCell component=\"th\" scope=\"row\" className={classes.tableCell}>\r\n                          {data.class}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\" className={classes.tableCell}>{confidence}%</TableCell>\r\n                      </TableRow>\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </CardContent>}\r\n              {isLoading && <CardContent className={classes.detail}>\r\n                <CircularProgress color=\"secondary\" className={classes.loader} />\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                  Processing\r\n                </Typography>\r\n              </CardContent>}\r\n            </Card>\r\n          </Grid>\r\n          {data &&\r\n            <Grid item className={classes.buttonGrid} >\r\n              <ColorButton variant=\"contained\" className={classes.clearButton} color=\"primary\" component=\"span\" size=\"large\" onClick={clearData} startIcon={<Clear fontSize=\"large\" />}>\r\n                Clear\r\n              </ColorButton>\r\n            </Grid>}\r\n        </Grid >\r\n      </Container >\r\n    </React.Fragment >\r\n  );\r\n};\r\n\r\n","import { ImageUpload } from \"./home\";\r\n\r\nfunction App() {\r\n  return <ImageUpload />;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}